c
params[:search]
params[:q]
c
listing.reservations.
c
Reservation.first
Reservation.all.length
Reservation.all
Listing.all
Listing.all.count
Listing.all
Listing.all.first
Listing.all.second
Listing.all
Listing.find(2)
Listing.find(2).reservations
listing.reservations
listing.reservations = []
listing.reservations.all.length
listing.reservations.all
listing.reservations
listing.resravations
listing.resrvations
listing
self
listing.reservations.class
listing.reservations
listing
listing.reservations.count
listing.reservations
c
 ReservationMailer.reservation_email(@user).deliver_later
n
c
@reservation.errors
@reservation.errors.full_messages
c
@reservation.errors.full_messages
@reservation.errors.full_meessages
@reservation.errors
c
@reservation.errors.full_messages
@reservation.errors
c
User.last.profile_image
@user.save!
@user.profile_image
user_params["profile_image"]
user_params
User.last.profile_image
@user.profile_image
c
@user.profile_image.url
@user.profile_image
User.last.profile_image
User.last.profile_image.url
ProfileImageUploader.all
ProfileImageUploader
User.last.profile_image_url
User.last.profile_image
User.last.profile_image_url
User.last.update(profile_image: params["profile_image"])
User.last.profile_image_url
@user.save
a.profile_image_url
a = User.last
User.last.profile_image_url
@user.profile_image_url
@user == User.last
User.last
User.last.profile_image_url
User.last
@user.profile_image_url
c
@user.profile_image_url
c
@user
@user.profile_image_url
@user.profile_image
@user.profile_image_url
@user
@user.profile_image
@user.profile_image_url
@user
c
@user.profile_image_url
c
@user.profile_image_url
c
@user.profile_image_url
@user.update(user_params)
user_params
c
@user.profile_image_url
@user
c
@user.profile_image_url
user_params["profile_image"]
@user
@user.update(profile_image: user_params["profile_image"])
@user
@user.update(user_params)
user_params
c
user_params
c
params.require(:user).permit(:firstname, :lastname, :email, :password, :birthday, :profile_image)
params.require(:user).permit(:firstname, :lastname, :email, :password, :birthday, {:profile_image => []})
params.require(:user).permit(:firstname, :lastname, :email, :password, :birthday, profile_image:[])
params.require(:user).permit(:firstname, :lastname, :email, :password, :birthday, {profile_image:[]})
user_params
params["user"]
params["firstname"]
params["birthday"]
params["birthday']
params
c
params["user"]["profile_image"]
params["user"]
user_params
user.params
params
c
params
c
user_params
params
c
params.permit(:min, :max).reject { |x, y| y.empty? }
params.permit(:min, :max).reject { |x| x.empty? }
filter_params
c
filter_params.reject(&String.empty?)
filter_params.reject(&empty?)
filter_params.reject(&:empty?)
filter_params.reject{|x| !x.empty? }
filter_params.reject{|x| x.empty? }
filter_params.reject
filter_params.present?
filter_params.present
filter_params.any?
filter_params
fitler_params
filter_params.map(&:empty?)
filter_params.map(&:empty?).class
filter_params.reject(&:empty?).present
filter_params.reject(&:empty?).any?
filter_params.map(&:empty?)
filter_params.reject(&:empty?)
filter_params.map(&:empty?)
filter_params.present?
filter_params.any?
filter_params
c
filter_params [:min].present?
c
"".present?
filter_params
filter_params.fetch(:max)
c
filter_params[:max]
filter_params[:min]
filter_params[:min] && filter_params[:max]
filter_params.any?
c
filter_params[:min]
filter_params
c
filter_params
Listing.price_range(2,8)
params
c
Listing.price_range(2,9)
c
@listings
c
filter_params
c
params.permit(:price)
params
filter_params
filter_param
filter_params
c
Listing.where(8).count
Listing.where(8)
Listing.filter(8)
a
a.count
a.title
a.class
a = Listing.filter(params[:price])
Listing.filter(params[:price])
Listing.filter(params)
@listings
@listing
params.count
params[:price]
params
c
Listing.filter({price: 8})
@listings
c
env
OmniAuth::FailureEndpoint.new(env).redirect_to_failure
OmniAuth::FailureEndpoint.new(env)
c
match
OmniAuth::FailureEndpoint
OmniAuth
to:
ti:
root
redirect
redirect_to
c
env
root_path
c
 OmniAuth::FailureEndpoint.new(env).redirect_to_failure[1]["Location"] = "/"
 OmniAuth::FailureEndpoint.new(env).redirect_to_failure[1]["Location"]
 OmniAuth::FailureEndpoint.new(env).redirect_to_failure["Location"]
 OmniAuth::FailureEndpoint.new(env).redirect_to_failure
 OmniAuth::FailureEndpoint.new(env).redirect_to
c
u.birthday
u.birthday = auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"#{$3}-#{$1}-#{$2}")
u.birthday
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"#{$3}-#{$1}-#{$2}")
u.lastname
u.birthday
c
Date.parse(auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"#{$3}-#{$1}-#{$2}"))
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"#{$3}-#{$1}-#{$2}")
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"#{$3}-#{$2}-#{$1}")
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"#{$3}-#{2}-#{1}")
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"#{$1}")
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"#{\3}")
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,/3)
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,\3)
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,"ff")
auth_hash["extra"]["raw_info"]["birthday"].gsub(/(\d{2})\/(\d{2})\/(\d{4})/,\3-\2-\1)
Date.parse("1998-08-23")
auth_hash["extra"]["raw_info"]["birthday"].gsub("/","-")
Date.parse(auth_hash["extra"]["raw_info"]["birthday"].gsub("/","-"))
Date.parse(auth_hash["extra"]["raw_info"]["birthday"])
require 'date'
DateTime.parse(auth_hash["extra"]["raw_info"]["birthday"])
Date.parse(auth_hash["extra"]["raw_info"]["birthday"])
auth_hash["extra"]["raw_info"]["birthday"].class
auth_hash["extra"]["raw_info"]["birthday"]
u.birthday
c
auth_hash["extra"]["raw_info"]["birthday"]
c
